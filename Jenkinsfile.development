pipeline {
    agent any
    
    environment {
        DEV_VM_IP = '192.168.1.101'
        DEV_VM_USER = 'ubuntu'
        ENVIRONMENT = 'development'
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out development branch...'
                checkout scm
                sh 'git checkout develop || git checkout -b develop'
            }
        }
        
        stage('Code Quality') {
            parallel {
                stage('Lint Check') {
                    steps {
                        echo 'Running code quality checks...'
                        sh '''
                            # Check Python syntax
                            find t29_custom_* -name "*.py" -exec python3 -m py_compile {} \;
                            
                            # Check XML syntax
                            find t29_custom_* -name "*.xml" -exec xmllint --noout {} \;
                            
                            # Check manifest files
                            for module in t29_custom_*; do
                                if [ -f "$module/__manifest__.py" ]; then
                                    python3 -c "import ast; ast.parse(open('$module/__manifest__.py').read())"
                                fi
                            done
                        '''
                    }
                }
                stage('Dependency Check') {
                    steps {
                        echo 'Checking module dependencies...'
                        sh '''
                            # Validate module dependencies
                            python3 -c "
                            import ast
                            import sys
                            
                            modules = ['t29_custom_one', 't29_custom_2', 't29_custom_3']
                            dependencies = {}
                            
                            for module in modules:
                                try:
                                    with open(f'{module}/__manifest__.py', 'r') as f:
                                        content = f.read()
                                    manifest = ast.literal_eval(content)
                                    dependencies[module] = manifest.get('depends', [])
                                except Exception as e:
                                    print(f'Error reading {module}: {e}')
                                    sys.exit(1)
                            
                            # Check dependency chain
                            if 't29_custom_one' not in dependencies['t29_custom_2']:
                                print('ERROR: t29_custom_2 must depend on t29_custom_one')
                                sys.exit(1)
                            
                            if 't29_custom_one' not in dependencies['t29_custom_3'] or 't29_custom_2' not in dependencies['t29_custom_3']:
                                print('ERROR: t29_custom_3 must depend on both t29_custom_one and t29_custom_2')
                                sys.exit(1)
                            
                            print('Dependency validation passed!')
                            "
                        '''
                    }
                }
            }
        }
        
        stage('Build Development Image') {
            steps {
                echo 'Building development Docker image...'
                sh 'docker build -t t29-odoo-dev:${BUILD_NUMBER} .'
                sh 'docker tag t29-odoo-dev:${BUILD_NUMBER} t29-odoo-dev:latest'
            }
        }
        
        stage('Deploy to Development') {
            steps {
                echo 'Deploying to development environment...'
                sshagent(['dev-vm-ssh']) {
                    sh '''
                        # Save Docker image
                        docker save t29-odoo-dev:latest | gzip > /tmp/t29-odoo-dev.tar.gz
                        
                        # Transfer to Development VM
                        scp /tmp/t29-odoo-dev.tar.gz ${DEV_VM_USER}@${DEV_VM_IP}:/tmp/
                        
                        # Deploy on Development VM
                        ssh ${DEV_VM_USER}@${DEV_VM_IP} "
                            cd /opt/t29-odoo-dev
                            docker load < /tmp/t29-odoo-dev.tar.gz
                            docker-compose -f docker-compose.dev.yml down
                            docker-compose -f docker-compose.dev.yml up -d
                        "
                        
                        # Cleanup
                        rm /tmp/t29-odoo-dev.tar.gz
                    '''
                }
            }
        }
        
        stage('Development Tests') {
            steps {
                echo 'Running development environment tests...'
                sh '''
                    # Wait for services to start
                    sleep 30
                    
                    # Test Odoo connectivity
                    for i in {1..5}; do
                        echo "Testing Odoo connectivity attempt $i/5..."
                        if curl -f http://${DEV_VM_IP}:8069/web/health; then
                            echo "Odoo is accessible!"
                            break
                        fi
                        echo "Waiting for Odoo to start..."
                        sleep 30
                    done
                    
                    # Test module installation
                    ssh ${DEV_VM_USER}@${DEV_VM_IP} "
                        cd /opt/t29-odoo-dev
                        docker-compose -f docker-compose.dev.yml exec -T odoo odoo -d odoo_dev -i t29_custom_one --stop-after-init
                        docker-compose -f docker-compose.dev.yml exec -T odoo odoo -d odoo_dev -i t29_custom_2 --stop-after-init
                        docker-compose -f docker-compose.dev.yml exec -T odoo odoo -d odoo_dev -i t29_custom_3 --stop-after-init
                    "
                '''
            }
        }
        
        stage('Integration Tests') {
            steps {
                echo 'Running integration tests...'
                sh '''
                    # Test module dependencies
                    ssh ${DEV_VM_USER}@${DEV_VM_IP} "
                        cd /opt/t29-odoo-dev
                        docker-compose -f docker-compose.dev.yml exec -T odoo odoo -d odoo_dev -u all --stop-after-init
                    "
                    
                    # Test API endpoints
                    curl -f http://${DEV_VM_IP}:8069/web/database/selector
                '''
            }
        }
    }
    
    post {
        success {
            echo 'Development deployment successful!'
            // Send notification to development team
        }
        failure {
            echo 'Development deployment failed!'
            // Send notification to development team
        }
        always {
            // Cleanup
            sh 'docker rmi t29-odoo-dev:${BUILD_NUMBER} || true'
        }
    }
}
